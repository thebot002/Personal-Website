Highlight,Name,ShortDescription,FullDescription,Github,Image,Tags,Start,End,Context
Yes,Olfactory Navigation Framework,"A project all about olfactory navigation. Allows the implementation of agents, building olfactory environments, run rimulations, and analyze results","In this project, I built a Python framework for the problem of Olfactory Navigation.<br>This framework is meant to allow a user to define the properties of an agent, and test its performance using simulations within an environment. To define an agent, the user needs to implement a limited set of functions (initialize_state, choose_action, update_state, kill). Then, the environment can be built from a numpy (.npy) or HDF5 (.h5) file. The source needs to be placed within the environment and the margins need to be defined. The environment supports having multiple olfactory layers, and multi-dimensional data. The environment provides some useful functions for the agent to interact with it such as: random_start_position, get_observation, at_source. Finally, the simulation function combines these elements together by hiding the exact position of the agent from it and moving it within the environment based on its chosen action. Once the simulation is done, the results can be saved very conveniently within readable csv files that can further be analyzed with pre-defined plotting functions.",https://github.com/PimLb/olfactory-navigation,Olfactory_Navigation_Illustration.png,Python,,,
,Personal Website,,,https://github.com/thebot002/Personal-Website,,Web,,,
Yes,POMDP PBVI Exploration,A project exploring the concepts of Partially-Observable Markov Decision Processes (POMDP) along with how to solve them through the Point-Based Value Iteration (PBVI) algorithms.,Heh,https://github.com/PimLb/POMDP_PBVI_Exploration,simulation_trajectory.png,Python,,,
Yes,Multi-Agent Covid Simulation,A project exploring the building of Multi-Agent simulation in JAVA with the package JADE.,Hip,https://github.com/thebot002/JADE-Covid-Simulation,MAS_COVID_Sim.png,Java,,,
,Surgeon Assistant Simulation Unity,,,,,C# Unity,,,
,Machine Translation,,,,,Python,,,
,Optimization of Mandelbrot set computation,,"In this project, I attempted optimize the computation of the Mandelbrot set. First a profiling has been performed to find out the hotspot of the computation, then the different parallelization and vectorization techniques learned were applied. These techniques were implemented with OpenMP, MPI, a hybrid of both, and finally CUDA. Within these implementations, different parameterizations were tried to find out the most optimal. Finally, all the runtimes were compared among each other to see if the theory matches to practice and to determine which was the most optimal implementation.",https://github.com/thebot002/HPC-Optimization-Mandelbrot,illustration_mandel.png,C++,,,
,COVID Data Visualization,,,https://github.com/DataViz-Covid/Final-Project/,,Web D3JS,,,
,Trento Tree Project Visualization,,,https://github.com/DataViz-Group3/DataViz-Group3.github.io,,Web D3JS,,,
,Reinforcement Learning for the game Hex,,"In this project, I explore building an Agent able to play the board game Hex.<br>Hex is 2 player where the goal is to link it's assigned two sides of the field. On interesting challenge about this game is that, due to the hexagonal architecture of the grid, there will always be a winner and a looser, there is no ties. It is usually played on a 11 by 11 or 13 by 13 board, which is a state space larger than the one of chess.<br>I explore the building of the agents we built in class to this board-game. I first build a trivial random play agent that is used to play against other agents. Following this I build a Minimax Agent with a limited search depth. Then, getting into reinforcement learning, I build a TQ-learning agent. And finally I build a deep-Q learning agent.",https://github.com/thebot002/RL-Hex,illustration_hex.png,Python,,,
,Speech Emotion Recognition,,"The topic of this project is emotion recognition from speech signals. To achieve that, a model can be trained using an audio database containing a variety of emotions (either basic or compound) for different speakers, e.g., EMODB (German), EMOVO (Italian), IEMOCAP (English), etc. Low-level descriptors can be computed either manually or using a dedicated tool, such as openSMILE, which provides a complete set of features for each specific audio recognition. Also, feature embedding using simple/variational autoencoders can be used. Training can be achieved using neural networks, either shallow or deep. The final output should be a system able to identify emotions based either on a basic psychological model (basic emotions) or using a bi-dimensional representation (positive/negative valence and high/low activation).",https://github.com/thebot002/Speech-Emotion-Recognition,illustration_emotion_recognition.png,Python,,,
,Computer Vision Air Drawing,,"In this project, I explored a computer vision library meant to help the annotation of body-parts of some frames and interpolation to further data. This was used to generate a sequence of points of my finger tracing out letters. Then, after identifying the start and end frames of each letters in the video, we attempted to train a Neural Network using the emnist dataset to label the letters I drew in the air.",https://github.com/thebot002/AirDrawing,illustration_air_drawing_annotated.png,Python,,,
,K Q-Flats ,,A project made in the context of the Machine Learning class of Computer Science Master's Degree at the Università di Genova. It explores the clustering algorithm known as k q-flats. This algorithm is a generalization of the k-means algorithm.,https://github.com/thebot002/K-QFolds,illustration_kqflats.png,Python,,,
,Kalman Filter for Object Tracking,,"In this project, I implemented a Kalman filter to track the position of an object in a video. Namely, I used two different videos of a pool player making a shot and tracking the position of the ball after this impact. Doing so required computer vision and pre-processing to mask-out all the irrelevant elements and in order to find the center of the balls. After the centers of the objects have been found for each frame in the video, the path in integrated using a Kalman filter.",https://github.com/thebot002/KalmanFilter-ObjectTracking,illustration_kalmann_filter_pool.png,Python,,,
,Crazy Putting Golf Simulator,,,,,Java,,,
,Pentominoes,,,,,Java,,,
,Webdesign websites,,,,,Web,,,
